package main

import (
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
)

// Data Structure
type Page struct {
	Title string
	Body  []byte // Use byte[] a byte slice as it is expected by the io libraries
}

// This is a method named save that takes as its receiver p, a pointer to Page.
// It takes no parameters and returns a value of type error
func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

// The function loadPage constructs the file anme from the title parameter,
// reads the file's contents into a new variable body, and returns a pointer to
// a Page literal constructed with the proper title and body values
// the function ReadFile can return multiple values,
// _ is the blank identifier which throws away the error
func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	t, _ := template.ParseFiles(tmpl + ".html")
	t.Execute(w, p)
}

func viewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/view/"):] // ie index from the path ->
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		// The http.Redirect function adds an HTTP status code of http.StatusFound (302)
		// and a Location header to the HTTP response.
		return
	}
	renderTemplate(w, "view", p)
}

func editHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	renderTemplate(w, "edit", p)
	// the .Title and .Body identifiers refer to the p.Title and p.Body
	// Template directives are enclosed in double curly braces.
	// The printf "%s" .Body instruction is a function call that outputs .Body as
	// a string instead of a stream of bytes, the same as a call to fmt.Printf.
	// The html/template package helps guarantee that only safe and correct-looking
	// HTML is generated by template actions. For instance, it automatically escapes
	// any greater than sign (>), replacing it with &gt;, to make sure user data
	// does not corrupt the form HTML.
}

func saveHandler(w http.ResponseWriter, r *http.Request) {
	// The page title (provided in the URL) and the form's only field,
	// Body, are stored in a new Page. The save() method is then called
	// to write the data to a file, and the client is redirected to the /view/ page.
	title := r.URL.Path[len("/save/"):]
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	// The value returned by FormValue is of type string. We must convert that value
	// to []byte before it will fit into the Page struct. We use []byte(body) to
	// perform the conversion.
	p.save()
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

func main() {
	http.HandleFunc("/view/", viewHandler)
	http.HandleFunc("/edit/", editHandler)
	http.HandleFunc("/save/", saveHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
