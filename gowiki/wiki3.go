package main

import (
	"log"
	"io/ioutil"
	"net/http"
	"html/template"
)

// Data Structure
type Page struct {
	Title string
	Body []byte // Use byte[] a byte slice as it is expected by the io libraries
}

// This is a method named save that takes as its receiver p, a pointer to Page. 
// It takes no parameters and returns a value of type error
func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

// The function loadPage constructs the file anme from the title parameter,
// reads the file's contents into a new variable body, and returns a pointer to
// a Page literal constructed with the proper title and body values
// the function ReadFile can return multiple values, 
// _ is the blank identifier which throws away the error
func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/view/"):]
	p, _ := loadPage(title)
	t, _ := template.ParseFiles("view.html")
	t.Execute(w, p)
}

func editHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	t, _ := template.ParseFiles("edit.html")
	// the .Title and .Body identifiers refer to the p.Title and p.Body
	// Template directives are enclosed in double curly braces. 
	// The printf "%s" .Body instruction is a function call that outputs .Body as 
	// a string instead of a stream of bytes, the same as a call to fmt.Printf. 
	// The html/template package helps guarantee that only safe and correct-looking 
	// HTML is generated by template actions. For instance, it automatically escapes 
	// any greater than sign (>), replacing it with &gt;, to make sure user data 
	// does not corrupt the form HTML.
	t.Execute(w, p)
}

func main() {
	http.HandleFunc("/view/", viewHandler)
	http.HandleFunc("/edit/", editHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
